{"ast":null,"code":"var _jsxFileName = \"/home/fikash/Dev/Temp-Projects/disco-2/client/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Spotify from 'spotify-web-api-js';\nconst spotifyWebAPI = new Spotify();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const params = this.getHashParams();\n    this.state = {\n      loggedIn: params.access_token ? true : false,\n      nowPlaying: {\n        name: 'Not Checked',\n        image: undefined\n      },\n      topTrack: undefined,\n      topTracksArray: undefined\n    };\n\n    if (params.access_token) {\n      spotifyWebAPI.setAccessToken(params.access_token);\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n\n    return hashParams;\n  }\n\n  getTopTracks() {\n    spotifyWebAPI.getMyTopTracks().then(response => {\n      let topArrayImages = [];\n\n      for (let i = 0; i < 5; i++) {\n        topArrayImages.push(response.items[i].album.images[1].url);\n      }\n\n      this.setState({\n        topTracksArray: topArrayImages.slice(0),\n        topTrack: response.items[0].album.images[1].url\n      });\n      console.log(this.state);\n    });\n  }\n\n  getNowPlaying() {\n    spotifyWebAPI.getMyCurrentPlaybackState().then(response => {\n      this.setState({\n        nowPlaying: {\n          name: response.item.name,\n          image: response.item.album.images[0].url\n        }\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(NowPlaying, {\n      nowPlaying: this.state.nowPlaying,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"buttonDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.getNowPlaying(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Check Now Playing\"), React.createElement(\"button\", {\n      onClick: () => this.getTopTracks(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Get Top Tracks\"), React.createElement(TopTracksGrid, {\n      topTracksArray: this.state.topTracksArray,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })));\n  }\n\n} // const TopTracks = (topTrack) => {\n//   if (topTrack.topTrack) {\n//     return (\n//       <div>\n//         <img src={topTrack.topTrack} style={{ float: 'left', width: 200 }} />\n//       </div>\n//     )\n//   } else {\n//     return null\n//   }\n// }\n\n\nconst TopTracksGrid = topTracksArray => {\n  if (topTracksArray.topTracksArray != undefined) {\n    let keyHolder = 0;\n    return React.createElement(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: \"20% 20% 20% 20% 20%\",\n        gridTemplateRows: \"25%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, topTracksArray.topTracksArray.map(eachTrack => React.createElement(\"img\", {\n      src: eachTrack,\n      key: ++keyHolder,\n      class: \"topTrackGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    })));\n  } else {\n    return null;\n  }\n};\n\nconst NowPlaying = nowPlaying => {\n  if (nowPlaying.nowPlaying.image != undefined) {\n    return React.createElement(\"div\", {\n      id: \"albumDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: nowPlaying.nowPlaying.image,\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        padding: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \" Now Playing:  \", nowPlaying.nowPlaying.name, \" \"));\n  } else {\n    return null;\n  }\n};\n\nexport default App;","map":{"version":3,"sources":["/home/fikash/Dev/Temp-Projects/disco-2/client/src/App.js"],"names":["React","Spotify","spotifyWebAPI","App","Component","constructor","props","params","getHashParams","state","loggedIn","access_token","nowPlaying","name","image","undefined","topTrack","topTracksArray","setAccessToken","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","getTopTracks","getMyTopTracks","then","response","topArrayImages","i","push","items","album","images","url","setState","slice","console","log","getNowPlaying","getMyCurrentPlaybackState","item","render","TopTracksGrid","keyHolder","display","gridTemplateColumns","gridTemplateRows","map","eachTrack","NowPlaying","width","padding"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Spotify from 'spotify-web-api-js';\n\nconst spotifyWebAPI = new Spotify()\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const params = this.getHashParams();\n\n    this.state = {\n      loggedIn: params.access_token ? true : false,\n      nowPlaying: {\n        name: 'Not Checked',\n        image: undefined,\n      },\n      topTrack: undefined,\n      topTracksArray: undefined\n    }\n\n    if (params.access_token) {\n      spotifyWebAPI.setAccessToken(params.access_token)\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n\n  getTopTracks() {\n    spotifyWebAPI.getMyTopTracks()\n      .then((response) => {\n        let topArrayImages = [];\n        for (let i = 0; i < 5; i++) {\n          topArrayImages.push(response.items[i].album.images[1].url)\n        }\n        this.setState({\n          topTracksArray: topArrayImages.slice(0),\n          topTrack: response.items[0].album.images[1].url\n        });\n        console.log(this.state)\n      })\n\n  }\n\n  getNowPlaying() {\n    spotifyWebAPI.getMyCurrentPlaybackState()\n      .then((response) => {\n        this.setState({\n          nowPlaying: {\n            name: response.item.name,\n            image: response.item.album.images[0].url\n          }\n        })\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <NowPlaying nowPlaying={this.state.nowPlaying} />\n\n        <div id=\"buttonDiv\">\n          <button onClick={() => this.getNowPlaying()} >\n            Check Now Playing\n         </button>\n\n          <button onClick={() => this.getTopTracks()} >\n            Get Top Tracks\n         </button>\n          {/* <TopTracks topTrack={this.state.topTrack} /> */}\n          <TopTracksGrid topTracksArray={this.state.topTracksArray} />\n        </div>\n      </div>\n    );\n  }\n}\n\n// const TopTracks = (topTrack) => {\n\n//   if (topTrack.topTrack) {\n//     return (\n\n//       <div>\n//         <img src={topTrack.topTrack} style={{ float: 'left', width: 200 }} />\n//       </div>\n//     )\n//   } else {\n//     return null\n//   }\n// }\n\nconst TopTracksGrid = (topTracksArray) => {\n  if (topTracksArray.topTracksArray != undefined) {\n    let keyHolder = 0;\n    return (\n      <div style={{ display: \"grid\", gridTemplateColumns: \"20% 20% 20% 20% 20%\", gridTemplateRows: \"25%\" }}>\n        {topTracksArray.topTracksArray.map(eachTrack => (\n          <img src={eachTrack} key={++keyHolder} class=\"topTrackGrid\" />\n        ))}\n      </div>\n    )\n  } else {\n    return null\n  }\n}\n\nconst NowPlaying = (nowPlaying) => {\n\n  if (nowPlaying.nowPlaying.image != undefined) {\n    return (\n      <div id=\"albumDiv\">\n        <img src={nowPlaying.nowPlaying.image} style={{ width: '100%' }} />\n        <div style={{ padding: 'auto' }}> Now Playing:  {nowPlaying.nowPlaying.name} </div>\n      </div>\n    )\n  } else {\n    return null;\n  }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}