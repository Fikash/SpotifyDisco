{"ast":null,"code":"var _jsxFileName = \"/home/fikash/Dev/Temp-Projects/disco-2/client/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Spotify from 'spotify-web-api-js';\nconst spotifyWebAPI = new Spotify();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const params = this.getHashParams();\n    this.state = {\n      loggedIn: params.access_token ? true : false,\n      nowPlaying: {\n        name: 'Not Checked',\n        image: undefined\n      },\n      topTrack: undefined\n    };\n\n    if (params.access_token) {\n      spotifyWebAPI.setAccessToken(params.access_token);\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n\n    return hashParams;\n  }\n\n  getTopTracks() {\n    spotifyWebAPI.getMyTopTracks().then(response => {\n      this.setState({\n        topTrack: response.items[0].album.images[1].url\n      });\n    }).then(response => {\n      console.log(this.state.topTracks);\n    });\n  }\n\n  getNowPlaying() {\n    spotifyWebAPI.getMyCurrentPlaybackState().then(response => {\n      this.setState({\n        nowPlaying: {\n          name: response.item.name,\n          image: response.item.album.images[0].url\n        }\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(NowPlaying, {\n      nowPlaying: this.state.nowPlaying,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.getNowPlaying(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Check Now Playing\"), React.createElement(\"button\", {\n      onClick: () => this.getTopTracks(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Get Top Tracks\"), React.createElement(TopTracks, {\n      topTrack: this.state.topTrack,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"a\", {\n      href: \"http://localhost:8888\",\n      style: {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Login\"));\n  }\n\n}\n\nconst TopTracks = topTrack => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, console.log(topTrack), React.createElement(\"img\", {\n    src: topTrack.topTrack,\n    style: {\n      float: 'left',\n      width: 200\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }));\n};\n\nconst NowPlaying = nowPlaying => {\n  if (nowPlaying.nowPlaying.image != undefined) {\n    return React.createElement(\"div\", {\n      style: {\n        width: 400,\n        height: 475,\n        margin: 'auto',\n        boxShadow: '10px 10px 5px grey',\n        backgroundColor: 'white'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, console.log(nowPlaying), React.createElement(\"img\", {\n      src: nowPlaying.nowPlaying.image,\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        padding: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \" Now Playing:  \", nowPlaying.nowPlaying.name, \" \"));\n  } else {\n    return null;\n  }\n};\n\nexport default App;","map":{"version":3,"sources":["/home/fikash/Dev/Temp-Projects/disco-2/client/src/App.js"],"names":["React","Spotify","spotifyWebAPI","App","Component","constructor","props","params","getHashParams","state","loggedIn","access_token","nowPlaying","name","image","undefined","topTrack","setAccessToken","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","getTopTracks","getMyTopTracks","then","response","setState","items","album","images","url","console","log","topTracks","getNowPlaying","getMyCurrentPlaybackState","item","render","TopTracks","float","width","NowPlaying","height","margin","boxShadow","backgroundColor","padding"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Spotify from 'spotify-web-api-js';\n\nconst spotifyWebAPI = new Spotify()\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const params = this.getHashParams();\n\n    this.state = {\n      loggedIn: params.access_token ? true : false,\n      nowPlaying: {\n        name: 'Not Checked',\n        image: undefined,\n      },\n      topTrack: undefined\n    }\n\n    if (params.access_token) {\n      spotifyWebAPI.setAccessToken(params.access_token)\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n\n  getTopTracks() {\n    spotifyWebAPI.getMyTopTracks()\n      .then((response) => {\n        this.setState({\n          topTrack: response.items[0].album.images[1].url\n        })\n      })\n      .then((response) => { console.log(this.state.topTracks) })\n  }\n\n  getNowPlaying() {\n    spotifyWebAPI.getMyCurrentPlaybackState()\n      .then((response) => {\n        this.setState({\n          nowPlaying: {\n            name: response.item.name,\n            image: response.item.album.images[0].url\n          }\n        })\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n\n        <NowPlaying nowPlaying={this.state.nowPlaying} />\n\n\n        <button onClick={() => this.getNowPlaying()} >\n          Check Now Playing\n         </button>\n\n        <button onClick={() => this.getTopTracks()} >\n          Get Top Tracks\n         </button>\n        <TopTracks topTrack={this.state.topTrack} />\n\n        <a href='http://localhost:8888' style={{}}>\n          Login\n        </a>\n      </div>\n    );\n  }\n}\n\nconst TopTracks = (topTrack) => {\n\n  return (\n    <div>\n      {console.log(topTrack)}\n      <img src={topTrack.topTrack} style={{ float: 'left', width: 200 }} />\n    </div>\n  )\n}\n\nconst NowPlaying = (nowPlaying) => {\n\n  if (nowPlaying.nowPlaying.image != undefined) {\n    return (\n      <div style={{ width: 400, height: 475, margin: 'auto', boxShadow: '10px 10px 5px grey', backgroundColor: 'white' }}>\n        {console.log(nowPlaying)}\n        <img src={nowPlaying.nowPlaying.image} style={{ width: '100%' }} />\n        <div style={{ padding: 'auto' }}> Now Playing:  {nowPlaying.nowPlaying.name} </div>\n      </div>\n    )\n  } else {\n    return null;\n  }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}